#include "model_engine.h"
#include <math.h>
#include <stdlib.h>

double p_out[16];
double p_in2[11];

//-------addsub-------//
double qz1[26],qz2[5][8],qz3[11][5];
int  kz1[26],kz2[5][8], kz3[7][5];
double fvsp;
double a6[7]={
      0.0,1.3843206,.020281423,-.0061593336,
     .00054773566,-.000021171511,.00000030534619};
double a7[7]={0.0,
     -.013017765,.023502618,-.0038040141,
     .00029463773,-.000010910482,.00000015523511};


//---------engine------//
double dobkpdk1,dobkpdk2,dobg31p,dobg2p;
double KOT3mod=0.1;
double KOT5mod=0.1;
double DKOT3;
double DKOT5;
double KOTmod;
int kz[7][7];double qz[11][7];
const double  SKCMAX =1.0; const double SKCMIN  =0.8;
const double   N1M= 11800.0; const double   N2M =17500.0;
const double VKC=56600.0;  const double VFK=1000000.0; const double VHK= 2000270.0;
const double HU=10250.0; const double IC=105.73;
const double AI1=.077;  const double AI2=.057;  const double MOSAG= 0.0;
const double FH=1200.7;  const double F21=1649.0;  const double F5=2800.0;
const double F2=224.4;   const double F4H= 1118.0; const double F4=1875.0;
const double KPDMX1=0.999;  const double KPDMX2=0.995;
const double SZD1=0.996;    const double SZD2=0.0145;    const double SZD3=0.25;
const double SZDMAX= 1.0; const double SZDMIN= .984;
const double KPBH= 0.0;  const double KXC=0.023;     const double KXB=0.02075;
const double KXH=0.0045;    const double KYT=0.0;    double G31P=55.6;
const double K1N1_dv[23]={0.0,
          0.2, 0.2563, 0.2921, 0.3676, 0.5615, 0.6675, 0.725, 0.7758, 0.8848, 0.8985, 0.9,
          -0.081, -0.081, -0.09, -0.09, -0.063, -0.088, -0.084, -0.079, -0.071, -0.069, -0.069};

const double  K2N2_dv[23]={0.0,
         0.5, 0.5278, 0.5671, 0.6883, 0.8487, 0.894, 0.9288, 0.96, 1.0256, 1.0354, 1.05,
         0.013, 0.013, -0.09, 0.012, -0.014, -0.022, -0.022, -0.02, -0.016, -0.018, -0.018};

const double  G31n2_dv[23]={0.0,
         0.5, 0.5278, 0.5671, 0.6883, 0.8487, 0.894, 0.9288, 0.96, 1.0256, 1.0354, 1.05,
         3.675, 3.675, -3.6, -3.7, -3.7, -3.7, -3.7, -3.7, -3.7, -3.7, -3.7};

const double  G2n2_dv[23]={0.0,
         0.5, 0.5278, 0.5671, 0.6883, 0.8487, 0.894, 0.9288, 0.96, 1.0256, 1.0354, 1.05,
         0.243, 0.243, 0.271, 0.43, -0.057,-0.375,-0.591, -0.609, -0.641, -0.642, -0.642};
double N2Piden;
int  JNV1=13;   int JPIV1=12;
const double XK11[326]={0.0,
3500.0, 6150.0,   6630.0,   7600.0,   8575.0,   9520.0,   10500.0, 10690.0, 11180.0, 11350.0,  12080.0, 12700.0, 13635.0,
1.025, 1.12597, 1.16196,1.24498, 1.34497, 1.46297, 1.576,  1.583,  1.602,  1.616,  1.65,   1.683,  1.688,
1.04,  1.12598, 1.16197, 1.24499, 1.34498, 1.46298, 1.591,  1.6066, 1.632,  1.6585, 1.68,   1.707,  1.713,
1.05,  1.12599, 1.16198, 1.245,   1.34499, 1.46299, 1.6022, 1.62,   1.657,  1.7,    1.708,  1.72,   1.742,
1.055, 1.126,   1.16199, 1.263,   1.345,   1.463,   1.607,  1.627,  1.685,  1.727,  1.736,  1.753,  1.768,
1.06,  1.145,   1.162,   1.279,   1.366,   1.486,   1.626,  1.651,  1.71,   1.752,  1.764,  1.781,  1.797,
1.064, 1.161,   1.178,   1.295,   1.385,   1.508,   1.647,  1.672,  1.734,  1.774,  1.791,  1.809,  1.825,
1.068, 1.175,   1.195,   1.309,   1.403,   1.524,   1.665,  1.69,   1.756,  1.795,  1.816,  1.837,  1.853,
1.07,  1.187,   1.21,    1.32,    1.418,   1.541,   1.683,  1.708,  1.776,  1.81,   1.839,  1.863,  1.881,
1.073, 1.195,   1.222,   1.329,   1.434,   1.558,   1.7,    1.725,  1.795,  1.815,  1.863,  1.888,  1.908,
1.074, 1.198,   1.231,   1.333,   1.445,   1.571,   1.713,  1.74,   1.813,  1.831,  1.883,  1.912,  1.935,
1.075, 1.1985,  1.234,   1.335,   1.453,   1.577,   1.72,   1.748,  1.826,  1.845,  1.902,  1.937,  1.965,
1.076, 1.1986,  1.235,   1.337,   1.456,   1.582,   1.724,  1.756,  1.838,  1.857,  1.92,   1.961,  1.998,
16.0,   26.0,   28.31,   32.62,   36.37,   40.57,   44.99,  45.72,  47.3,   47.63,  48.55,  49.0,   49.45,
15.0,   26.0,   28.31,   32.62,   36.37,   40.57,   44.9,   45.58,  47.25,  47.61,  48.55,  49.0,   49.45,
14.5,  26.0,    28.31,   32.62,   36.37,   40.57,   44.83,  45.48,  47.18,  47.58,  48.54,  49.0,   49.45,
14.0,   26.0,   28.31,   32.18,   36.37,   40.57,   44.77,  45.42,  47.1,   47.45,  48.5,   49.0,   49.45,
13.5,  25.54,   28.31,   31.75,   35.99,   40.27,   44.53,  45.2,   46.96,  47.35,  48.48,  49.0,   49.45,
13.0,   25.12,  27.9,    31.27,   35.6,    39.87,   44.25,  44.97,  46.82,  47.17,  48.45,  49.0,   49.45,
12.5,  24.68,   27.47,   30.7,    35.13,   39.58,   44.0,    44.72,  46.63,  46.98,  48.4,  49.0,   49.45,
12.0,   24.2,   26.97,   30.05,   34.68,   39.17,   43.63,  44.43,  46.4,   46.75,  48.27,  48.95,  49.45,
11.5,  23.63,   26.47,   29.27,   34.18,   38.65,   43.2,   44.0,    46.1,   46.67,  48.07, 48.85,  49.45,
11.25, 23.25,   25.88,   28.85,   33.72,   38.13,   42.7,   43.53,  45.75,  46.32,  47.85,  48.75,  49.44,
11.0,  23.0,    25.07,   28.6,    33.13,   37.68,   42.18,  43.07,  45.35,  45.9,   47.55,  48.58,  49.42,
10.75, 22.75,   24.27,   28.33,   32.55,   37.0,     41.5,   42.42,  44.85,  45.35, 47.2,   48.37,  49.35};
const  int  JNV2= 13;  const  int JPIV2 = 12;
const double XK12[326]={0.0,
3500.0,  6150.0,    6630.0,  7600.0,    8575.0,   9520.0, 10500.0, 10690.0, 11180.0, 11350.0, 12080.0, 12700.0, 13635.0,
1.025, 1.12597, 1.16196, 1.24498, 1.34497, 1.46297, 1.576,  1.583,  1.602,   1.61,   1.65,   1.683,  1.688,
1.04,  1.12598, 1.16197, 1.24499, 1.34498, 1.46298, 1.595,  1.6066, 1.632,   1.658,  1.68,   1.707,  1.713,
1.05,  1.12599, 1.16198, 1.245,   1.34499, 1.46299, 1.6022, 1.62,   1.657,   1.7,    1.708,  1.72,   1.742,
1.055, 1.126,   1.16199, 1.263,   1.345,   1.463,   1.603,  1.627,  1.685,   1.727,  1.736,  1.753,  1.768,
1.06,  1.145,   1.162,   1.279,   1.366,   1.486,   1.626,  1.651,  1.71,    1.752,  1.764,  1.781,  1.797,
1.064, 1.161,   1.178,   1.295,   1.385,   1.508,   1.647,  1.672,  1.734,   1.774,  1.791,  1.809,  1.825,
1.068, 1.175,   1.195,   1.309,   1.403,   1.524,   1.665,  1.69,   1.756,   1.795,  1.816,  1.837,  1.853,
1.07,  1.187,   1.21,    1.32,    1.418,   1.541,   1.683,  1.708,  1.776,   1.81,   1.839,  1.863,  1.881,
1.073, 1.195,   1.222,   1.329,   1.434,   1.558,   1.7,    1.725,  1.795,   1.815,  1.863,  1.888,  1.908,
1.074, 1.198,   1.231,   1.333,   1.445,   1.571,   1.713,  1.74,   1.813,   1.831,  1.883,  1.912,  1.935,
1.075, 1.1985,  1.234,   1.335,   1.453,   1.577,   1.72,   1.748,  1.826,   1.845,  1.902,  1.937,  1.965,
1.076, 1.1986,  1.235,   1.337,   1.456,   1.582,   1.724,  1.756,  1.838,   1.857,  1.92,   1.961,  1.998,
0.7,   0.7729,  0.8089,  0.8149,  0.8405,  0.857,   0.8576, 0.84, 0.8221,    0.8104, 0.744,  0.7015, 0.6539,
0.7,   0.7729,  0.8089,  0.8149,  0.8405,  0.857,   0.8707, 0.8635, 0.8391,  0.8344, 0.7685, 0.72,   0.674,
0.7,   0.7729,  0.8089,  0.8149,  0.8405,  0.857,   0.8762, 0.8722, 0.8524,  0.8554, 0.789,  0.7311, 0.6955,
0.7,   0.7729,  0.8089,  0.8339,  0.8405,  0.857,   0.877,  0.8784, 0.8659,  0.8671, 0.8085, 0.751,  0.713,
0.7,   0.7934,  0.8089,  0.8469,  0.8561,  0.8728,  0.892,  0.8925, 0.8772,  0.8769, 0.8263, 0.774,  0.729,
0.7,   0.8089,  0.8184,  0.8584,  0.87,    0.8865,  0.9028, 0.9017, 0.887,   0.885,  0.8416, 0.795,  0.7419,
0.7,   0.8174,  0.8274,  0.8684,  0.882,   0.8955,  0.9084, 0.9064, 0.8937,  0.8901, 0.8514, 0.8135, 0.7505,
0.7,   0.8214,  0.836,   0.8739,  0.8912,  0.905,   0.9099, 0.9074, 0.8951,  0.8893, 0.8579, 0.8255, 0.7559,
0.7,   0.8224,  0.8406,  0.8749,  0.8987,  0.9105,  0.906,  0.9039, 0.8911,  0.8879, 0.8576, 0.826,  0.757,
0.7,   0.821,   0.8419,  0.873,   0.8979,  0.906,   0.8979, 0.8949, 0.8814,  0.8801, 0.8469, 0.81,   0.748,
0.7,   0.8188,  0.8376,  0.871,   0.8899,  0.899,   0.8884, 0.8854, 0.8714,  0.8699, 0.824,  0.7889, 0.7295,
0.7,   0.8159,  0.8249,  0.8669,  0.8774,  0.8859,  0.8744, 0.8694, 0.8599,  0.8549, 0.789,  0.7629, 0.6939,};
const  int  JNK1= 10;  const  int JFIK1=   2;     const  int JPIK1 =  10;
const double XK21[431]={0.0,
   9550.000, 11930.000, 12700.000, 13500.000, 14300.000, 15090.000, 15855.000, 16290.000, 17000.000, 17500.000,
   -15.000,   -15.000,   -15.000,    -5.000,    -5.000,    -5.000,    -5.000,    -5.000,     0.000,     0.000,
    0.000,      0.000,     0.000,     0.000,     0.000,     0.000,     0.000,     0.000,     0.000,     0.000,
     1.404,     2.159,     2.448,     2.957,     3.430,     3.720,     3.910,     4.430,     4.600,     4.655,
     1.450,     2.200,     2.519,     2.993,     3.500,     3.790,     4.000,     4.550,     4.600,     4.655,
     1.473,     2.284,     2.631,     3.191,     3.790,     4.110,     4.330,     4.780,     4.976,     5.018,
     1.522,     2.327,     2.700,     3.232,     3.840,     4.170,     4.392,     4.904,     4.976,     5.018,
     1.526,     2.395,     2.835,     3.390,     4.030,     4.380,     4.640,     5.040,     5.254,     5.296,
     1.579,     2.437,     2.911,     3.431,     4.118,     4.480,     4.762,     5.200,     5.254,     5.296,
     1.579,     2.521,     3.018,     3.548,     4.250,     4.620,     4.920,     5.380,     5.631,     5.720,
     1.640,     2.560,     3.079,     3.590,     4.298,     4.750,     5.022,     5.553,     5.631,     5.720,
     1.625,     2.620,     3.151,     3.721,     4.430,     4.860,     5.180,     5.617,     5.845,     5.938,
     1.678,     2.640,     3.200,     3.750,     4.497,     4.990,     5.324,     5.760,     5.845,     5.938,
     1.655,     2.696,     3.287,     3.833,     4.530,     5.020,     5.380,     5.788,     6.066,     6.137,
     1.709,     2.720,     3.334,     3.889,     4.617,     5.130,     5.523,     5.966,     6.066,     6.137,
     1.675,     2.749,     3.380,     3.928,     4.610,     5.120,     5.580,     5.960,     6.273,     6.408,
     1.724,     2.789,     3.405,     3.980,     4.717,     5.210,     5.679,     6.130,     6.273,     6.408,
     1.700,     2.810,     3.446,     4.012,     4.660,     5.220,     5.703,     6.080,     6.451,     6.579,
     1.739,     2.840,     3.471,     4.050,     4.767,     5.300,     5.811,     6.230,     6.451,     6.579,
     1.724,     2.890,     3.488,     4.073,     4.720,     5.280,     5.805,     6.159,     6.537,     6.679,
     1.753,     2.912,     3.517,     4.110,     4.787,     5.330,     5.900,     6.300,     6.537,     6.679,
     1.740,     2.976,     3.528,     4.096,     4.750,     5.310,     5.885,     6.200,     6.679,     6.865,
     1.758,     3.000,     3.553,     4.123,     4.790,     5.331,     5.974,     6.340,     6.679,     6.865,
     3.902,     6.073,     6.742,     7.525,     8.350,     9.000,     9.460,     9.740,    10.138,    10.220,
     4.031,     6.180,     6.900,     7.613,     8.487,     9.180,     9.703,    10.000,    10.138,    10.220,
     3.870,     6.058,     6.724,     7.500,     8.308,     8.971,     9.459,     9.734,    10.135,    10.220,
     3.996,     6.160,     6.880,     7.581,     8.419,     9.159,     9.700,    10.000,    10.135,    10.220,
     3.830,     6.037,     6.685,     7.470,     8.245,     8.933,     9.442,     9.725,    10.133,    10.220,
     3.963,     6.130,     6.835,     7.545,     8.348,     9.120,     9.692,     9.992,    10.133,    10.220,
     3.776,     6.008,     6.631,     7.416,     8.129,     8.900,     9.428,     9.695,    10.119,    10.220,
     3.891,     6.080,     6.781,     7.490,     8.255,     9.050,     9.668,     9.969,    10.119,    10.220,
     3.715,     5.965,     6.566,     7.319,     7.991,     8.800,     9.397,     9.663,    10.103,    10.220,
     3.834,     6.043,     6.700,     7.400,     8.135,     8.953,     9.624,     9.937,    10.103,    10.220,
     3.676,     5.922,     6.462,     7.239,     7.865,     8.700,     9.343,     9.622,    10.083,    10.220,
     3.748,     6.000,     6.559,     7.290,     7.986,     8.842,     9.558,     9.898,    10.083,    10.220,
     3.611,     5.893,     6.372,     7.148,     7.706,     8.557,     9.270,     9.542,    10.060,    10.220,
     3.694,     5.954,     6.444,     7.200,     7.809,     8.700,     9.495,     9.800,    10.060,    10.220,
     3.528,     5.850,     6.258,     7.029,     7.521,     8.377,     9.186,     9.460,    10.030,    10.220,
     3.611,     5.900,     6.326,     7.100,     7.643,     8.500,     9.365,     9.720,    10.030,    10.220,
     3.431,     5.764,     6.170,     6.875,     7.352,     8.213,     9.040,     9.370,    10.008,    10.220,
     3.482,     5.806,     6.204,     6.930,     7.401,     8.277,     9.242,     9.570,    10.008,    10.220,
     3.268,     5.630,     6.065,     6.749,     7.062,     7.870,     8.756,     9.276,     9.964,    10.211,
     3.340,     5.659,     6.108,     6.806,     7.136,     7.900,     8.920,     9.500,     9.964,    10.211};

const  int  JNK2= 8;  const  int JFIK2=   2; const  int JPIK2 =  10;
const double XK22[431]  ={0.0,
  9550.000, 12200.000, 12600.000, 13320.000, 13850.000, 14100.000, 15343.000, 15900.000,
   -15.000,    -15.000,    -5.000,    -5.000,    -5.000    -5.000,      .000,      .000,
      .000,      .000,      .000,      .000,      .000,      .000,      5.000,     5.000,
     1.519,     2.609,     2.773,     3.040,     3.614,     3.408,      4.250,      4.280,
     1.519,     2.609,     2.773,     3.090,     3.700,     3.496,      4.120,      4.000,
     1.566,     2.610,     2.850,     3.158,     3.777,     3.536,      4.500,      4.600,
     1.566,     2.610,     2.850,     3.208,     3.814,     3.624,      4.300,      4.356,
     1.605,     2.680,     2.923,     3.287,     3.900,     3.668,      4.650,      4.900,
     1.605,     2.680,     2.923,     3.337,     3.907,     3.755,      4.600,      4.730,
     1.640,     2.743,     3.005,     3.373,     4.000,     3.757,      4.800,      5.200,
     1.640,     2.743,     3.005,     3.423,     3.970,     3.844,      4.900,      5.140,
     1.686,     2.830,     3.085,     3.470,     4.100,     3.902,      4.920,      5.600,
     1.686,     2.830,     3.085,     3.520,     4.100,     3.990,      5.150,      5.580,
     1.725,     2.938,     3.215,     3.585,     4.180,     4.135,      5.100,      5.700,
     1.725,     2.938,     3.215,     3.635,     4.200,     4.222,      5.360,      5.800,
     1.740,     2.990,     3.310,     3.815,     4.250,     4.378,      5.280,      5.930,
     1.740,     2.990,     3.310,     3.860,     4.280,     4.465,      5.450,      5.930,
     1.748,     3.020,     3.380,     3.965,     4.330,     4.530,      5.417,      6.050,
     1.748,     3.020,     3.380,     4.015,     4.400,     4.617,      5.580,      6.060,
     1.753,     3.040,     3.430,     4.015,     4.390,     4.602,      5.570,      6.200,
     1.753,     3.040,     3.430,     4.065,     4.470,     4.690,      5.670,      6.280,
     1.775,     3.060,     3.436,     4.034,     4.430,     4.662,      5.630,      6.260,
     1.775,     3.060,     3.436,     4.084,     4.490,     4.750,      5.700,      6.370,
      .767,      .776,      .783,      .784,      .837,      .785,       .834,       .798,
      .767,      .776,      .783,      .784,      .840,      .785,       .815,       .772,
      .779,      .776,      .794,      .799,      .849,      .799,       .850,       .815,
      .779,      .776,      .794,      .799,      .848,      .799,       .827,       .790,
      .788,      .787,      .804,      .814,      .854,      .815,       .856,       .830,
      .788,      .787,      .804,      .814,      .852,      .815,       .844,       .810,
      .796,      .796,      .814,      .824,      .857,      .825,       .862,       .842,
      .796,      .796,      .814,      .824,      .854,      .825,       .855,       .830,
      .806,      .806,      .824,      .834,      .859,      .840,       .865,       .850,
      .806,      .806,      .824,      .834,      .856,      .840,       .860,       .845,
      .813,      .816,      .834,      .846,      .860,      .855,       .866,       .850,
      .813,      .816,      .834,      .844,      .856,      .855,       .860,       .846,
      .818,      .818,      .836,      .854,      .859,      .863,       .864,       .847,
      .818,      .818,      .836,      .851,      .855,      .860,       .856,       .846,
      .818,      .818,      .834,      .848,      .857,      .861,       .855,       .840,
      .818,      .818,      .834,      .844,      .850,      .855,       .845,       .844,
      .817,      .816,      .824,      .834,      .850,      .845,       .837,       .823,
      .817,      .816,      .824,      .834,      .842,      .845,       .830,       .825,
      .814,      .814,      .819,      .824,      .826,      .821,       .810,       .790,
      .814,      .814,      .819,      .824,      .833,      .821,       .810,       .790};
   const  int JNT11=  7;  const  int JPIT11=  7;
   const double XTH1[106] ={0.0,
   160.0,	200.0,	250.0,	300.0,	350.0,	400.0,	450.0,
   1.11,	1.1101,	1.1102,	1.1103,	1.1104,	1.1105,	1.1106,
   1.153,	1.1531,	1.1532,	1.1533,	1.1534,	1.1535,	1.1536,
   1.247,	1.2471,	1.2472,	1.2473,	1.2474,	1.2475,	1.2476,
   1.35,	1.3501,	1.3502,	1.548,	1.577,	1.623,	1.6231,
   1.465,	1.4701,	1.4702,	1.9,	1.9001,	1.9002,	1.9003,
   1.658,	1.6581,	1.6582,	2.2,	2.2001,	2.2002,	2.2003,
   2.7,	    2.7001,	2.7002,	2.7003,	2.7004,	2.7005,	2.7006,
   72.0,	72.0,	72.0,	72.0,	72.0,	72.0,	72.0,
   82.5,	82.5,	82.5,	82.5,	82.5,	82.5,	82.5,
   97.5,	95.3,	95.3,	95.3,	95.3,	95.3,	95.3,
   109.7,	106.7,	105.0,	118.33,	118.2,	118.2,	118.2,
   119.7,	116.6,	114.6,	125.7,	124.4,	124.4,	123.0,
   128.3,	127.4,	126.4,	127.1,	126.4,	126.9,	124.9,
   129.0,	129.0,	129.0,	129.0,	129.0,	129.0,	129.0};
     const  int    JNT12=7;     const  int JPIT12=8;
   const double XTH2 [120]={0.0,
    160.0,   200.0,   250.0,    300.0,    350.0,    400.0,    450.0,
    1.094,  1.105,  1.13,    1.485,   1.465,   1.718,   1.588,
    1.115,  1.132,  1.25,    1.600,   1.535,   1.818,   1.772,
    1.135,  1.185,  1.337,   1.656,   1.656,   1.853,   1.942,
    1.159,  1.258,  1.600,   1.748,   1.805,   1.961,   2.038,
    1.182,  1.300,  1.736,   1.900,   2.00,    2.112,   2.212,
    1.241,  1.353,  1.848,   2.248,   2.200,   2.201,   2.309,
    1.315,  1.400,  2.025,   2.375,   2.324,   2.3241,  2.412,
    1.444,  1.465,  2.300,   2.448,   2.488,   2.4881,  2.500,
     .793,   .700,   .619,    .850,    .836,    .867,    .855,
     .809,   .783,   .76,    .869,    .852,    .881,    .881,
     .824,   .819,   .788,    .874,    .871,    .885,    .893,
     .831,   .836,   .826,    .875,    .887,    .886,    .896,
     .831,   .840,   .832,    .871,    .888,    .886,    .896,
     .824,   .836,   .8315,   .852,    .886,    .883,    .893,
     .807,   .826,   .819,    .833,    .879,    .879,    .883,
     .757,   .800,   .771,    .811,    .857,    .862,    .874};
     const  int JNT22=12;
     const double XTK2[25]={0.0,
             2.1,   2.15,   2.2,   2.25,   2.3,    2.35,   2.4,    2.45,  2.5,    2.55,  2.575,  2.6,
             0.896, 0.8942, 0.892, 0.8894, 0.8866, 0.8838, 0.8806, 0.877, 0.8728, 0.868, 0.8654, 0.8628};

     const  int JDKYdr=12;

     const double AKYG_dr[25]={0.0,
          5000.0, 6000.0, 7000.0, 8000.,  9461.0, 9760.0, 10359.0, 13411.0, 14760.0, 15458.0,  16000.0, 17000.0,
          .28,    .30,   .32,   .510,   .42,   .405,   .384,  .419,   .481,   .502,    .557,   .557};

      const  int JG31Pi= 9;   // _____  G31P = f(PIT2)  ____ ARRAY   G31PIT
        const double G31PIT[19]={0.0,
                0.5,    1.0,    1.09,   1.18,   1.27,    1.45,   1.63,    1.9,   5.0,
               0.001,  0.001,   33.11,  41.72,   47.76,   52.67,  55.697,  56.6,  56.6};
        double GTO =  0.058;   double GTF = 0.000; double N1 =3649.309; double N2=9735.559;
        double P3 =  1.941; double T3 = 791.340;  double P21H=   1.081;  double T4H =293.445;

            double P6 =1.076; double T6 = 396.671;  double SIGFK =  0.990;  double SIGKC =  0.971;
            double P4H  = 1.068;  double P21  = 1.081;double P2 =    1.999;double FKP  =1740.000;
            double FI1= -30.000; double FI2=  -15.000;   double GKC =3.637;   double G3 = 3.691;
            double P43  = 1.048; double PITH =   1.174; double T41 = 695.516;

           double P4 = 1.033; double G21H  = 10.751;   double G4H =10.751; double P4CT =   1.029;
             double G4 =  3.924;  double T5= 396.666; double PHCT =   1.033; double T4HCT = 290.289;
            double T411=687.487; double T21 = 293.445; double T2 = 365.898; double G6  = 14.675;
               double kpdt2 =0.971; double PIT2  =  1.577;  double T4 =666.409; double G2  =  4.838;

           double SIGCM = 0.978;  double SIGZD  = 0.986;  double KC =  1.395;
           double KCID  =1.366; double PITC  =   1.853;  double T31= 779.692;
            //     ________________
             double  TIME=0.0;
   double STEP=0.002;
   double QL[31]={0.0,
        0.0,.1582,.3123,.4584,.5928,.7121,.8133,.87220,
       .9204,.9529,.9735,.9883,.9957,.9989,1.0,
       .0,.10,.20,.30,.40,.50,.60,.67,.74,.80,.85,.90,.94,.97,1.0};
        double OMKC[20] ={0.0,
       1.0,   2.0, 3.6,  5.2,  9.6,  12.0, 14.0, 18.0,
       .995, .995, .99, .965, .875, .790, .73, .54};
       double H,M,THCT,K1,AL1,TH,PH;
       double SIGBX,WP,DN1,DN2,N1OTN,N2OTN,N1P,SIG22,P5;
       double fvsp1;
       double P1,T1,KOT3,KOT5;//,RUD;
       double N21OT,N1OT,PIK1,G21P,KPDK11,koef1,koef2;
       double kpdk1,G21,TCP,I21,I1,MOSK1,SIT21,KCP,ALPHA;
       double N2P,N2OT,SIG21,PIK2,G2P,KPDK22,kpdk2,koef3;
       double T21K,koef4,TCRD,K2,AL2,I2,MOSK2,CKY,PIGdr,CKYG,DKY,CTD;
       double i5ct,T5ct,KOT,QLK,KSKC,koef5,QT3;
       double K32,K31,K3,OM,AL,kpdkc,koef6,I3,DI3,DT3,R3,DP3,NT2;
        double G31,I31,G411,KT2,I411,NT1;
        double KPDKC1,AL31,P41,PIT1,GTBO,KTHD,GTB,G4111,TAP,DP41;
        double AGT1,KPDT11,koef7,KPDT1,koef8,KPDT22,KT1,ALT1;
        double T43,IT22,DENT2,MOST2,I4,IT12,DENT1,MOST1,K4,AL4,R4,SQAM4,AM4;
        double IT11,Q4,L4,PL4, SIT22,T21H,K4H1,AL4H,K4H2,K4H,DI4H,DT4H1,DT4H2,
               DT4H3,DT4H,DP21H,Q21H,L21H,KSHK,SIGH,dddn1,dddsig,SIGH1;
        double I4H,P4HCT,SQRL4H,L4H,TL4H,Q4H,SQAM4H,AM4H,PIC,G5,I5,K5,AL5,Q5,L5,R5,SQAM5;
        double QT5,AM5,QT6,K6,AL6,K61,K62,R6,I6,DI6,DT6,DP6,PIPAC,FICL,PID,SQLID,LID;
        double  LC,SQAMC,AMC,TLC,TC,WC,R,CR,GTPK,PITR,T4OTN,DN2OT,TT4,PL4H,QC;

        const double a5en=0.2453695;
        const   double a6en=  0.2220757;
        const   double anen=  0.65109078;
        const   double c5en=  0.000044725209;
        const   double c6en=  0.008729571;
        const   double cnen=  0.16569798;
        const   double d5en=  -0.043175541;
        const   double d6en=  -3.4619954;
        const   double dnen=  -231.714176;
        const   double f5en=  11.2577253;
        const   double f6en=  14144.5963;
        const   double fnen=  301153.631;
        const   double a5y=  0.2453695;
        const   double a6y=  0.2220757;
        const   double any=  0.65109078;
        const   double b5y=  -3.4273035;
        const   double b6y=  -111.573093;
        const   double bny=  -584.404217;
        const   double c5y=  0.000044725209;
        const   double c6y=  0.008729571;
        const   double cny=  0.16569798;
        const   double d5y=  -0.043175541;
        const   double d6y=  -3.4619954;
        const   double dny=  -231.714176;
        const   double f5y=  11.2577253;
        const   double f6y=  14144.5963;
        const   double fny=  301153.631;

        //----------------------------------------------
        double n2z_i,an2p_i,an2_i,dan2_i,dun2_i,un2_i,uslid_in2,udkid_in2,
              cixid_in2,duixid_in2,uixid_in2,xdkzid_in2,xdkid_in2,dxdkid_in2;
        double n1z_i,an1p_i,dan1_i,dun1_i,un1_i,uslid_in1,udkid_in1,dxdkid_in1,
              cixid_in1,duixid_in1,uixid_in1,xdkzid_in1,an1_i,xdkid_in1;
        double p2z_i,ap2p_i,ap2_i,dap2_i,dup2_i,up2_i,uslid_ip2,udkid_ip2,
              cixid_ip2,duixid_ip2,uixid_ip2,xdkzid_ip2,xdkid_ip2,
              dxdkid_ip2;
        double t4z_i,at4p_i,at4_i,dat4_i,dut4_i,ut4_i,uslid_it4,udkid_it4,
              cixid_it4,duixid_it4,uixid_it4,xdkzid_it4,xdkid_it4,dxdkid_it4;

        double n1ot,n21ot;

        double   dK2d,dK2s;
        double dobgtb;
        double	n2rsr,n2msr,n2rtr,n2mtr;
        int  j_sr_rej,j_osr,j_ur;
        int kfirst;
        double n1porf,n2porf,n1por,n2por,n1por1,n2por1, t_u_r,t_u_m;
        double XDKid_in1,XDKid_in2,XDKid_ip2,XDKid_it4;
        double n1mi,n2mi;
        double n2mtr0,n2rtr0;
        double time_ust_r2,time_ust_m2;
        int j_test_stat=1;
        double t1;
        double dk1d,dk2d,dG31d,dG2d,dK1s,dG31s,dG2s;
        int i;

Model_Engine::Model_Engine()
{

}

void Model_Engine::init(double p_in1[],double pout[])
{

    int it;
    for(it=0;it<20;it++)
    {
    kz1[it]=0;
    qz1[it]=0;
    }

 fint2on (XK11,JNV1,JPIV1,kz2,qz2,1);
 fint2on (XK12,JNV2,JPIV2,kz2,qz2,2);
 fint2on (XTH1,JNT11,JPIT11,kz2,qz2,3);
 fint2on (XTH2,JNT12,JPIT12,kz2,qz2,4);
 fint3on(XK21,JNK1,JFIK1,JPIK1,kz3,qz3,1);
 fint3on(XK22,JNK2,JFIK2,JPIK2,kz3,qz3,2);


 p_in2[1]=288.15;
 p_in2[2]= 1.03;
  p_in2[2]=240.0/3600.0;
  p_in2[3]=-15.0;

  p_in2[4]=0.1;
  p_in2[5]=0.1;
  //p_in2[6]=;
  eng(p_in2,p_out);

  for(it=0;it <20.0/STEP;it++)
  {
    eng(p_in1,pout);
  }
  it=0;
}
void Model_Engine::eng(double in[],double out[])
{
        P1=in[0];
        T1=in[1];
        GTO=in[2];
        FI2=in[3];
        KOT3=in[4];
        KOT5=in[5];
    //	RUD=in[6];

        PHCT=P1;
        PH=P1;
        THCT=T1;
        TH=T1;
        f08b24(THCT,0.0,0.0,11.0,&K1,&AL1);
          WP=M*sqrt(K1*29.27*9.81*THCT);

    //	    ______________________________
           N1=N1+DN1*STEP ;

           N2=N2+DN2*STEP ;

           N1OTN=N1/N1M ;
           N2OTN=N2/N2M ;
           P2=P3/SIGKC;
           N1P=N1*sqrt(288.15/T1);

          SIG22=1.0;
          P21=P21H/SIG22;
          P5=P6/SIGFK;
        SIGCM=.936;
        if(N21OT<0.75) SIGCM=1.1456-0.279*N21OT;
        if(SIGCM>=1.0) SIGCM=1.0;
           P4=P5*F5/(F4*SIGCM)-P4H*F4H/F4;
        if(P4<P1) P4=P1;
        SIGZD=.96;
        if(N21OT<0.75) SIGZD=1.091-0.1747*N21OT;
        if(SIGZD >= 1.0) SIGZD=1.0;
          P43=P4/SIGZD;
    //    ______________ FAN ________________________________________
           N1OT=N1P/N1M;
           PIK1=ogra(P21/P1,1.0001,20.0);
             fint2n(XK11,N1P,PIK1,&G21P,1);
             fint2n(XK12,N1P,PIK1,&KPDK11,2);
    //	 fint1(KKPDK1,JKKPDK1,N21OT,&koef1,1); ###
     //    	 fint1(KG21P,JKG21P,N21OT,&koef2,2);
        G21P=G21P;

    //	G21P=G21P*(1+del_g21p/100.);
    //	G21P=G21P+dobg21p;  //###

          kpdk1=KPDK11;
          if(kpdk1 >.999) kpdk1=.999;
          if(kpdk1<.5) kpdk1=.5;

        //kpdk1=kpdk1*(1+del_kpdk1/100.);
        kpdk1=ogra(kpdk1,0.5,0.999);
        //fint1(K1N1_dv,11, N1OT,&dobkpdk1,20);
        //kpdk1=kpdk1+dobkpdk1;
        //kpdk1=ogra(kpdk1,0.5,0.999);
        G21=G21P*sqrt(288.15/T1)*P1/1.0332;
          if(G21>100.0)G21=100.0;
          if(G21<1.0) G21=1.0;
          TCP=0.5*(T1+T21);
          f08b24 (TCP,0.0,0.0,G21,&KCP,&ALPHA);
          T21=T1*(1.+(pow(PIK1,(KCP-1.)/KCP)-1.)/kpdk1);

          I21=entalp(T21,0.0);
          I1=entalp(T1,0.0);
          MOSK1=G21*(I21-I1)*4.1889;
    //    ______________ COMPRESSOR  ______

        SIT21=.995;
        T21K=ogra(T21*SIT21,T1,1000.0);
          N21OT=N2/N2M*sqrt(288.15/T1);
          N2P=N2*sqrt(288.15/T21K);
          N2OT=N2P/N2M;
         SIG21=1.0; //!!!!!!debug
        PIK2=ogra(P2/(P21*SIG21),1.001,20.0);
        fint3n(XK21,N2P,FI2,PIK2,&G2P,1);
        fint3n(XK22,N2P,FI2,PIK2,&KPDK22,2);
    //	 fint1(K//KPDK2,JKKPDK2,N21OT,&koef3,3);###
        kpdk2=KPDK22;
        if(kpdk2>.999) kpdk2=.999;
          if(kpdk2<.5) kpdk2=.5;

    //	kpdk2=kpdk2*(1+del_kpdk2/100.0);
        kpdk2=ogra(kpdk2,0.5,0.999);
    //	fint1(K2N2_dv,11,N21OT,&dobkpdk2,21);
    //	kpdk2=kpdk2+dobkpdk2;
    //	kpdk2=ogra(kpdk2,0.5,0.999);

      //  fint1(G2n2_dv,11,N21OT,&dobg2p,22);
    //	G2P=G2P+dobg2p;

        G2=G2P*sqrt(288.15/T21K)*P21/1.0332;
          if(G2>50.0) G2=50.0;
          if(G2<0.5) G2=0.5;
          TCRD=0.5*(T21K+T2);
          f08b24(TCRD,0.0,0.0,G2,&K2,&AL2);
          T2=T21K*(1.0+(pow(PIK2,(K2-1.0)/K2)-1.0)/kpdk2);
      //    t2=t21* (1.+ (pow(pik2,(k2-1. )/k2)-1. )/kpdk2);
          I2=entalp(T2,0.0);

          MOSK2=G2*(I2-I21)*4.1889;
          TCRD=0.5*(T21K+T2);
          G21H=G21-G2*(1.0-KPBH);

          if(G21H<1.0) G21H=1.0;
        CKY=PIK2/G2P;
          fint1(AKYG_dr,JDKYdr,N2P,&PIGdr,5);
        CKYG=1.2*PIGdr;
          DKY=CKYG/CKY*100.0-100.0;

          CTD=G21H/G2;
    //     ____ DROWN FROM COMPRESSOR  OUTLET  ____
        i5ct=I21+0.56*(I2-I21);
        T5ct=ogra(tent(i5ct,0.0),T1,1000.0);
     //     KOT=ogra((KOT3+KOT5),0.0,0.2);30.06.22
    //	GKC=G2*(1-KXB-KXH-KXC-KYT-KOT);
        DKOT3=ogra((KOT3-KOT3mod)/0.2,-0.2,0.2);
            KOT3mod=ogra(KOT3mod+DKOT3*STEP,0.,0.1);
            DKOT5=ogra((KOT5-KOT5mod)/0.2,-0.2,0.2);
            KOT5mod=ogra(KOT5mod+DKOT5*STEP,0.,0.1);
            KOTmod=ogra((KOT3mod+KOT5mod),0.,0.2);
            GKC=G2*(1-KXB-KXH-KXC-KYT-KOTmod);
          if(GKC<=1.01*GTO) GKC=1.01*GTO;
    //    ______   COMBUSTOR  _________________________
          QLK=G2P/F2/0.396;
          fint1(QL,15,QLK,&AL2,6);
          T2=ogra(T2,T1,1000.0);
        KSKC=G2*sqrt(T2)/P2/100.0;
      //  fint1(KSIGKC,JKSIGKC,N21OT,&koef5,7);
          SIGKC=(-0.48214*KSKC*KSKC+.057371*KSKC+.99222);
        if(SIGKC>SKCMAX)SIGKC=SKCMAX;
          if(SIGKC<SKCMIN)SIGKC=SKCMIN;
        QT3=GTO/GKC;
          f08b24 (T3-1.0,GTO,0.0,G3-GTO,&K32,&AL);
          f08b24 (T3+1.0,GTO,0.0,G3-GTO,&K31,&AL);
          f08b24 (T3,GTO,0.0,G3-GTO,&K3,&AL);

          OM=GKC/(pow(P2,1.8)*pow(2.718,(T2/300.0)))/0.022;
       //   OM=GKC/(P2**1.8*           2.718**(T2/300.))/0.022
          fint1(OMKC,8,OM,&KPDKC1,8);
    //	fint1(KKPDKC,JKKPDKC,N21OT,&koef6,9); ###
          kpdkc=KPDKC1;
      //    if(kpdkc <0.642) kpdkc=0.642;
        //if(kpdkc>0.975) kpdkc=0.975;
    //	kpdkc=kpdkc*(1.0+del_kpdkc/100.0);
        kpdkc=ogra(kpdkc,0.642,0.975);
    //	kpdkc=kpdkc+dobkpdkc;     //###
    //	kpdkc=kpdkc+0.07;


        R3=2927.0*(1.0+1.0862*QT3)/(1.0+QT3);
          I3=entalp(T3,QT3);
          DI3=(entalp(T3+1.,QT3)/K31-entalp(T3-1.,QT3)/K32)*0.5;
          DT3=R3*T3/(VKC*P3*DI3)*(GTO*(kpdkc*HU+IC-I3/K3)+GKC
         *(I2-I3/K3)-G3*(K3-1.0)*I3/K3);
          DP3=R3*T3/VKC*(GKC+GTO-G3)+P3*DT3/T3 ;
          T3=ogra((T3+DT3*STEP),T1,2000.);
          P3=ogra((P3+DP3*STEP),P1,30.);
    //     ___________   LPT, HPT ______________________________________________________

           fint1(G31PIT,JG31Pi,PIT2,&G31P,10);
      //     fint1(G31n2_dv, 11, N21OT, &dobg31p,24);
      //    G31P=G31P*(1+del_g31p/100.);
        //    G31P=G31P+dobg31p;
           T31=ogra(T31,T1,2000.0);
           NT2=N2/sqrt(T31);
          G31=G31P*P3/sqrt(T31);
          if(G31<=1.01*GTO) G31=1.01*GTO;
          G3=G31-KXC*G2;
          if(G3<=1.01*GTO) G3=1.01*GTO;
          I31=(entalp(T3,GTO/(G3-GTO))*G3
         +entalp(T2,0.0)*KXC*G2)/G31;
          T31=tent(I31,GTO/(G31-GTO));
          T31=ogra(T31,T1,2000.0);
          G411=G31+KXB*G2;
          G4=G411+KXH*G2;
          f08b24(T31,GTO,0.0,(G31-GTO),&KT2,&AL31);
          T41=T31*(1.0+kpdt2*(pow((1./PIT2),((KT2-1.)/KT2))-1.));
          T41=ogra(T41,T1,2000.0);
          I411=(entalp(T41,GTO/(G31-GTO))*G31
         +entalp(T2,0.0)*KXB*G2)/G411;
          T411=tent(I411,GTO/(G411-GTO));
    //   ...............................

          PITC=P3/P43;
          if(NT2>=700.0) NT2=700.0;
          T411=ogra(T411,T1,2000.0);
          NT1=N1/sqrt(T411);
          if(NT1>=700.) NT1=700.0;
    //  ...............................
          PITH=ogra(P41/P43,1.0001,10.0);
          PIT1=PITH;
          fint2n (XTH1,NT1,PITH,&GTBO,3);
          KTHD=1.075;
            if(N21OT<0.75) KTHD=0.5182+0.7424*N21OT;
            if(KTHD<0.9) KTHD=0.9;
          GTB=KTHD*GTBO;
    //        GTB=GTB*(1+del_gtb/100.);
    //	GTB=GTB+dobgtb; ###
          G4111=GTB*P41/sqrt(T411);
          TAP=0.1;
          DP41=(G411-G4111)/TAP;
          P41=P41+DP41*STEP;
          P41=ogra(P41,P1,30.0) ;
    //   ...............................
    /*	goto m794;
     m793:  continue;                   //

     fint2 (XTH1,NT1,PITH,GTBO,kz2,qz2,3);

          PIT1=G411*sqrt(T411)/(GTB*P43);
          if(PIT1<1.05)PIT1=1.05;
          AGT1=fabs((PIT1-PITH)/PITH);
          PITH=PITH+(PIT1-PITH)*0.5;
          if(AGT1 > 0.01)goto m793;
      m794: continue ;
          */
    //   ...............................
          fint2n (XTH2,NT1,PIT1,&KPDT11,4);
     //     fint1(KKPDT1,JKKPDT1,N21OT,&koef7,11);

         KPDT1=KPDT11;
     //     if(KPDT1<.5) KPDT1=.5;
     //     if(KPDT1>.99) KPDT1=.99;

     //     KPDT1=KPDT1*(1+del_kpdt1/100.);
          KPDT1=ogra(KPDT1,.5,.99);

       //   KPDT1=KPDT1+dobkpdk1;
       //   KPDT1=ogra(KPDT1,.5,.99);
    //   ...............................
          PIT2=PITC/PIT1;
          if(PIT2<1.05)PIT2=1.05;
          fint1(XTK2,JNT22,PIT2,&KPDT22,12);
     //     fint1(KKPDT2,JKKPDT2,N21OT,&koef8,13); ###
          kpdt2=KPDT22;
    //	if(kpdt2>.99)kpdt2=.99;
    //      if(kpdt2<.6)kpdt2=.6;

    //	kpdt2=kpdt2*(1+del_kpdt2/100.);

        kpdt2=ogra(kpdt2,.6,.99);
    //	kpdt2=kpdt2+dobkpdk2;
    //	kpdt2=ogra(kpdt2,.6,.99);

    //  ...............................
          f08b24(T411,GTO,0.0,G411-GTO,&KT1,&ALT1);
          T43=T411*(1.0+KPDT1*(pow((1.0/PIT1),(KT1-1.0)/KT1)-1.0));
     //     t43=t411*(1.+kpdt1* (pow((1./pit1), (kt1-1.) /kt1)-1.));
          T43=ogra(T43,T1,2000.0);
          I31=entalp(T31,GTO/(G31-GTO));
          IT22=entalp(T41,GTO/(G31-GTO));
          DENT2=I31-IT22;
          MOST2=KPDMX2*DENT2*G31*4.1889*1.0;

    //  ...............................
          I4=(entalp(T43,GTO/(G411-GTO))*G411+entalp(T2,0.0)*G2*KXH)/G4;
          T4=tent(I4,GTO/(G4-GTO));
          T4=ogra(T4,T1,2000.0);
          IT11=entalp(T411,GTO/(G411-GTO));
          IT12=entalp(T43,GTO/(G411-GTO));
          DENT1=IT11-IT12;
          MOST1=KPDMX1*DENT1*G411*4.1889;
          DN1=9295.478/AI1*(MOST1-MOSK1)/N1;
          DN2=9295.478/AI2*(MOST2-MOSK2-MOSAG)/N2;
    //     ____________________
          f08b24(T4,GTO,0.0,G4-GTO,&K4,&AL4);
          R4=29.27*(1.0+1.0862/(AL4*14.95))/(1.0+1.0/(AL4*14.95));
          fvsp=K4+1.0;fvsp1=K4-1.0;
    //      SQAM4=ABS(K4*9.81/R4*(2./(K4+1))**((K4+1)/(K4-1)))
          SQAM4=fabs(K4*9.81/R4*pow(2.0/fvsp,fvsp/fvsp1));
    //                 k4*9.81/r4*pow((2./(fvsp)),((fvsp)/(fvsp1)))
          AM4=sqrt(SQAM4);
          T4=ogra(T4,T1,2000.0);
          Q4=G4*sqrt(T4)/(F4*P4*AM4);
          if(Q4>1.0) Q4=1.0;
          fint1(QL,15,Q4,&L4,14);
          PL4=pow((1.0-(fvsp1/fvsp)*(L4*L4)),(K4/fvsp1));
     //     pl4=pow((1.- ((fvsp1)/(fvsp))*(l4*l4)),(k4/(fvsp1)));
          P4CT=P4*PL4;
          P4CT=ogra(P4CT,P1,30.0);
    //     __________  EXTERNAL  DUCT  __________________________
         SIT22=1.0; // !!!!!!debug

            T21H=SIT22*T21;
          T21H=ogra(T21H,T1,2000.0) ;
          f08b24(T4H-1.0,0.0,0.0,G4H,&K4H1,&AL4H);
          f08b24(T4H+1.0,0.0,0.0,G4H,&K4H2,&AL4H);
          f08b24 (T4H,0.0,0.0,G4H,&K4H,&AL4H);
          DI4H=(entalp(T4H+1.0,0.0)/K4H2- entalp(T4H-1.0,0.0)/K4H1)*0.5;
          DT4H1=(G21-G2)*(entalp(T21H,0.0)-entalp(T4H,0.0)/K4H);
          DT4H2=-G4H*(K4H-1.0)/K4H*entalp(T4H,0.0);
          DT4H3=G2*(KPBH*(entalp(T2,0.0)-entalp(T4H,0.0)/K4H)+
          KYT*(entalp(T2,0.0)-entalp(T4H,0.0)/K4H));

          DT4H=2927.0*T4H/(VHK*P4H*DI4H)*(DT4H1+DT4H2+DT4H3);
          DP21H=2927.0*T4H*(G21H-G4H)/VHK+P21H*DT4H/T4H;
          T4H=T4H+DT4H*STEP;
          T4H=ogra(T4H,T1,2000.0);
          P21H=P21H+DP21H*STEP;
          P21H=ogra(P21H,P1,30.0);
          T21H=ogra(T21H,T1,2000.0);
          Q21H=2.515*G21H*sqrt(T21H)/(FH*P21H);
          if(Q21H>1.0)Q21H=1.0;
          fint1(QL,15,Q21H,&L21H,15);
        KSHK=(G21-G2)*sqrt(T21H)/P21H/1000.0;
        SIGH=-1.8309*KSHK*KSHK+.40014*KSHK+.97025;
        dddn1=ogra(4000.0-N1,0.0,1000.0);
        dddsig=0.00001*dddn1;
        SIGH1=SIGH+dddsig;
        SIGH=1.00*SIGH1;
          if(SIGH<=0.6)SIGH=0.6;
          if(SIGH>=1.0)SIGH=1.0;
          P4H=SIGH*P21H;
        P4H=ogra(P4H,P1,30.0);
          I4H=entalp(T4H,0.0);
           f08b24 (T4HCT,0.0,0.0,G4H,&K4H,&AL4H);
          P4HCT=P4CT;
          PL4H=P4HCT/P4H;
          if(PL4H>0.999) PL4H=0.999;
          fvsp=K4H+1.0; fvsp1=K4H-1.0;
     //     SQRL4H=ABS((1-PL4H**((K4H-1)/K4H))*(K4H+1)/(K4H-1))
          SQRL4H=fabs((1.0-pow(PL4H,fvsp1/K4H))*(fvsp)/(fvsp1));
    //      (1.0-            pow(pl4h,(fvsp1)/k4h))*(fvsp)/(fvsp1)
          L4H=sqrt(SQRL4H);
          if(L4H>1.0)L4H=1.0;
          TL4H=1.0-(fvsp1)/(fvsp)*L4H*L4H;
          T4HCT=T4H*TL4H ;
          T4HCT=ogra(T4HCT,T1,2000.0);
    //      q4h=pow(((fvsp)/2.),(1./(fvsp1)))*l4h*
            Q4H=pow(((fvsp)/2.0),(1.0/(fvsp1)))*L4H*
        pow((1.0-(fvsp1)*L4H*L4H/(fvsp)),(1.0/(fvsp1)));
    //am4h=       sqrt(k4h*9.81/29.27*pow((2./(fvsp)),  ((fvsp)/(fvsp1)));
          SQAM4H=fabs(K4H*9.81/29.27*pow(2.0/fvsp,fvsp/fvsp1));
          AM4H=sqrt(SQAM4H);
          T4H=ogra(T4H,T1,2000.0);
          G4H=P4H*F4H*AM4H*Q4H/sqrt(T4H);
    //    ___________  MIXER  ___________________________________________________________
          PIC=P5/P1;
          G5=G4+G4H;
          if(G5<=1.01*GTO) G5=1.01*GTO;
          I5=(G4*I4+G4H*I4H)/G5;

          T5=tent(I5,GTO/(G5-GTO));
          T5=ogra(T5,T1,2000.0);
          f08b24(T5,GTO,0.0,G5-GTO,&K5,&AL5);
          Q5=G5*sqrt(T5)/(P5*F5*0.396);
          fint1(QL,15,Q5,&L5,16);
          R5=29.27*(1.0+1.0862/(AL5*14.95))/(1.0+1.0/(AL5*14.95)) ;

          SQAM5=fabs(K5*9.81/R5*pow(2.0/(K5+1.0),((K5+1.0)/(K5-1.0))));
          AM5=sqrt(SQAM5);

    //     _______   VOLUM BEFOR NOZZLE________
          QT5=GTO/G5;
          QT6=GTO/G5;
          f08b24(T6-1.0,GTO,0.0,G6-GTO,&K62,&AL6);
          f08b24(T6+1.0,GTO,0.0,G6-GTO,&K61,&AL6);
          f08b24(T6,GTO,0.0,G6-GTO,&K6,&AL6);
    //-------------  IX.<9 11.44 _____________________________________
          R6=2927.0*(1.0+1.0862*QT6)/(1.0+QT6);
          I6=entalp(T6,QT6);
          DI6=(entalp(T6+1.0,QT6)/K61-entalp(T6-1.0,QT6)/K62)*0.5;
          DT6=R6*T6/(VFK*P6*DI6)*(G5*(I5-
          I6/K6)-G6*(K6-1.0)*I6/K6);
          DP6=R6*T6/VFK*(G5-G6)+P6*DT6/T6;
          P6=ogra((P6+DP6*STEP),P1,30.0);
          T6=ogra((T6+DT6*STEP),T1,2000.0);
    //     ________  NOZZLE  ________________________________________________________________
          PIPAC=P6/PHCT;
          FICL=0.98;
          PID=1.0/PIPAC;
          if(PID>=0.999)PID=0.999;

          fvsp=KC+1.0;fvsp1=KC-1.0;
     //      SQLID=ABS((1-PID**((KC-1)/KC))*(KC+1)/(KC-1))
          SQLID=fabs((1.0-pow(PID,fvsp1/KC))*fvsp/fvsp1);
          LID=sqrt(SQLID);
          LC=FICL*LID;
         // QC=LC*(1.-(KC-1.)/(KC+1.)*LC**2)**(1./(KC-1))*((KC+1.)/2.)**(1./(KC-1))
          QC=LC*pow((1.0-(fvsp1)/(fvsp)*LC*LC),(1.0/(fvsp1)))*pow(((fvsp)*0.5),(1.0/(fvsp1)));
    //    qc=lc*pow((1.- (fvsp1)/(kc+1.)*lc*lc),(1./(fvsp1)))*pow(((fvsp)*0.5),(1./(fvsp1)));
          if(QC >1.0)QC=1.0;
          SQAMC=fabs(KC*9.81*pow(2.0/(fvsp),(fvsp)/(fvsp1))/(R6*0.01));
     //          sqrt(kc*9.81*pow(2./(fvsp),(fvsp)/(fvsp1))/(r6*0.01));
          AMC=sqrt(SQAMC);
          T6=ogra(T6,T1,2000.0);
          G6=AMC*FKP*P6*QC/sqrt(T6);
          if(G6<=1.01*GTO) G6=1.01*GTO ;
          TLC=(1.0-((KC-1.0)/(KC+1.0))*LC*LC);
          TC=T6*TLC;
          f08b24(TC,GTO,0.0,G6-GTO,&KC,&AL6);
          WC=LC*sqrt(2*KC/(KC+1)*.0981*R6*T6);
          R=(G6*WC-G21*WP)/9.81;
          CR=3600.0*GTO/R;
          GTPK=GTO*3600.0/P2*1.0332/sqrt(T1/288.15) ;
          PITR=P2/P4;
          T4OTN=T4/837.823;
          DN2OT=DN2/17480.0;
    //	N1max    N2max   P2max P4max T4max  T3max Rdmax  Almax  Dkymax
        out[0]=N1;
        out[1]=N2;
        out[2]=P2;
        out[3]=P4;
        out[4]=T4;
        out[5]=T3;
        out[6]=R;
        out[7]=AL;
        out[8]=DKY;

}
void Model_Engine::ca(double hp,double *tatm,double *patm)
{
 if(hp>=11000.)
 {
     fvsp=(11000.-hp)/6318.0;
 *tatm=216.6;
 *patm=0.2314*exp(fvsp);
 }
 else
 {
 *tatm=288.15-.0065*hp;
 *patm=1.0332*pow(*tatm/288.15,5.2553);
 }
}
void  Model_Engine::fint1(const double xm[],int jx,double x,double *y,int l)
{
     int k;
     if(kz1[l] == 0)
     {
      kz1[l]=1;
     if(xm[1] == xm[2])
      qz1[l]=0;
     else
      qz1[l]=(xm[jx+2]-xm[jx+1])/(xm[2]-xm[1]);
      }
      k=kz1[l];
      m3:  if(xm[k] <= x && x < xm[k+1])goto m2;
     if(x < xm[k])
        {
        if(k == 1)goto m2;
        k=k-1;
        }
      else
       {
       if(k == jx-1)goto m2;
       k=k+1;
       }

     if(xm[k] == xm[k+1])
      qz1[l]=0;
     else
      qz1[l]=(xm[jx+k+1]-xm[jx+k])/(xm[k+1]-xm[k]);
     kz1[l]=k;
     goto m3;
 m2:   *y=xm[jx+k]+qz1[l]*(x-xm[k]);

}
void Model_Engine::f08b24(double b,double gto,double gtf,double gb,double *k,double *al)
{
      double t,dvsp;

      t=b*0.01; ////100.;
      dvsp=gto+gtf;
      if ((dvsp) == 0) *al=1.e+15;
      if((dvsp) > 0) *al=gb/((dvsp)*14.95);
      *k=f08b36(t,6,a6)-f08b36(t,6,a7)/(*al);
 }
//     ****************************;
  double Model_Engine::f08b36(double x,int m,double c[])
     {
     int i,k,n;
     double r;

      r=c[m];
      n=m-1;
     for(k=1;k <=n ;k++)//do 1 k=1,n
      {
      i=m-k;
      r=r*x+c[i];
      }
      return r;
}
//   **************************;
double Model_Engine::entalp(double t,double q)
      {
      double p,pn,vt2;
      double yentalp ;

       vt2=t*t;
      if(t <= 600.) p=a5y*t+b5y+sqrt(c5y*vt2+d5y*t+f5y);
      if(t > 600.)  p=a6y*t+b6y+sqrt(c6y*vt2+d6y*t+f6y);
      if(q < 1.0e-07) goto m5;
      pn=any*t+bny+sqrt(cny*vt2+dny*t+fny);
      yentalp=(double)((p+q*pn)/(1.+q));
      return yentalp;
  m5:
      yentalp=(double)p;
      return yentalp;
      }
double Model_Engine::entd(double t,double q)
      {
      double p,pn,tp2;
      double yentd;

      tp2=t*t;
      pn=anen+(2.*cnen*t+dnen)/(2.*sqrt(cnen*tp2+dnen*t+fnen));
      if(t <= 600.) p=a5en+(2.*c5en*t+d5en)/(2.*sqrt(c5en*tp2+d5en*t+f5en));
      if(t > 600.) p=a6en+(2.*c6en*t+d6en)/(2.*sqrt(c6en*tp2+d6en*t+f6en));
      yentd=(double)((p+q*pn)/(1.+q));
      return yentd;
      }

//   **************************;
double Model_Engine::tent (double i,double q)
      {
      double bi,aib,to;
      double teny;
      bi=i*(1.+q);
      aib=(bi+160.*q)/(1.+3.*q);
      to=4.078516*aib+13.619482-sqrt(0.012357074*aib*aib-
      2.8422896*aib+177.36742);
      teny=(double)(to+(i-entalp(to,q))/entd(to,q));
      return  teny;
}
//    *************************;

//**************************************
void Model_Engine::fint3on(const double xm[],int jx1z,int jx2z,int jx3z,
             int kz[7][5],double qz[11][5],int l) //;//!!!simulinc
{
      double dx;
     int i;

       kz[1][l]=jx1z;
      kz[2][l]=jx2z;
      kz[3][l]=jx3z;

      kz[4][l]=1;
      kz[5][l]=1;
      kz[6][l]=1;

      dx=xm[2]-xm[1];
      for(i=1;i<=2;i++)   // do 1 i=1,2;
      {
      qz[i][l]=(xm[jx1z*i+2]-xm[jx1z*i+1])/dx;
      qz[i+2][l]=(xm[jx1z*(i+jx2z)+2]-xm[jx1z*(i+jx2z)+1])/dx;
      qz[i+4][l]=(xm[jx1z*(i+2*jx2z)+2]-xm[jx1z*(i+2*jx2z)+1])/dx;
      qz[i+6][l]=(xm[jx1z*(i+jx2z*(1+jx3z))+2]-
                xm[jx1z*(i+jx2z*(1+jx3z))+1])/dx;
      qz[i+8][l]=(xm[jx1z*(i+jx2z*(2+jx3z))+2]-
                xm[jx1z*(i+jx2z*(2+jx3z))+1])/dx;
    }

 }
void Model_Engine::fint3n(const double xm[],double x1,double x2,double x3,double *y,int l) // ;//!!!simulinc;
{

    int i,lm,jx1,jx2,jx3,kx1,kx2,kx3,ivsp,jx12;
       double dx;
       double dx1=0;
    double dx2=0;
    double x21=0;
    double x22=0;
    double x31=0;
    double x31a,x31b;
    double x32=0;
    double x32a,x32b;
       double y1,y1a,y1b,y2,y2a,y2b;
      jx1=kz3[1][l];
      jx2=kz3[2][l];
      jx3=kz3[3][l];
      kx1=kz3[4][l];
      kx2=kz3[5][l];
      kx3=kz3[6][l];
      jx12=jx1*jx2;
 m3:  if(xm[kx1] <= x1 && x1 < xm[kx1+1]) goto m2;
      if(x1 < xm[kx1])
      {
      if(kx1 == 1)goto m2;
      kx1=kx1-1;
      }
      else
      {
      if(kx1 == jx1-1)goto m2;
      kx1=kx1+1;
     }
      kz3[4][l]=kx1;
      lm=1;
      goto m12;
 m2:  dx1=x1-xm[kx1];
      x21=xm[jx1*kx2+kx1]+qz3[1][l]*dx1;
      x22=xm[jx1*(kx2+1)+kx1]+qz3[2][l]*dx1;
      if(x21 <= x2 && x2 < x22)goto m5;
      if(x2 < x21)
      {
        if(kx2 == 1)goto m5;
        kx2=kx2-1;
        }
       else
       {
      if(kx2 == jx2-1)goto m5;
       kx2=kx2+1;
      }
      kz3[5][l]=kx2;
      lm=2;
 m12:   dx=xm[kx1+1]-xm[kx1];
     for(i=0;i<=1;i++) // do 11 i=0,1;
     qz3[i+1][l]=(xm[jx1*(kx2+i)+kx1+1]-xm[jx1*(kx2+i)+kx1])/dx;
      goto m9;
 m5:   ivsp=jx1*(jx2*kx3+kx2)+kx1;
      if(x21 == x22)
       {
        x31=xm[ivsp]+qz3[3][l]*dx1;
        x32=xm[jx12+ivsp]+qz3[5][l]*dx1;
       }
      else
      {
       dx2=x2-x21;

       x31a=xm[ivsp]+qz3[3][l]*dx1;
       x32a=xm[jx1+ivsp]+qz3[4][l]*dx1;
       x31=x31a+dx2*(x32a-x31a)/(x22-x21);
       x31b=xm[jx12+ivsp]+qz3[5][l]*dx1;
       x32b=xm[jx12+jx1+ivsp]+qz3[6][l]*dx1;
       x32=x31b+dx2*(x32b-x31b)/(x22-x21);
    }
      if(x31 <= x3 && x3 < x32)goto m10;
      if(x3 < x31)
      {
        if(kx3 == 1)goto m10;
       kx3=kx3-1;
       }
      else
      {
      if(kx3 == jx3-1)goto m10;
       kx3=kx3+1;
       }
      kz3[6][l]=kx3;
      lm=3;
      dx=xm[kx1+1]-xm[kx1];
 m9:    fvsp=1.0/dx;
       for(i=0;i<=1;i++) //do 7 i=0,1;
        {
      ivsp=jx1*(i+jx2*kx3+kx2)+kx1;
      qz3[i+3][l]=(xm[ivsp+1]-xm[ivsp])*fvsp;
      qz3[i+5][l]=(xm[jx12+ivsp+1]- xm[jx12+ivsp])*fvsp;
      qz3[i+7][l]=(xm[jx12*jx3+ivsp+1]-xm[jx12*jx3+ivsp])*fvsp;
      qz3[i+9][l]=(xm[jx12*(jx3+1)+ivsp+1]- xm[jx12*(jx3+1)+ivsp])*fvsp;

        }
      switch(lm)     // goto (3,2,5) lm;
      {
      case 1: goto m3;
      case 2: goto m2;
      case 3: goto m5;;
      }

 m10:
   ivsp=jx1*(jx2*(kx3+jx3)+kx2)+kx1;
   if(x21 == x22)
     {
    //  y1=xm[jx1*(jx2*(kx3+jx3)+kx2)+kx1]+qz3[7][l]*dx1;
      y1=xm[ivsp]+qz3[7][l]*dx1;
     // y2=xm[jx1*(jx2*(kx3+jx3+1)+kx2)+kx1]+qz3[9][l]*dx1;
      y2=xm[jx12+ivsp]+qz3[9][l]*dx1;
      }
      else
      {
    //  y1a=xm[jx1*(jx2*(kx3+jx3)+kx2)+kx1]+qz3[7][l]*dx1;
      y1a=xm[ivsp]+qz3[7][l]*dx1;
    //  y2a=xm[jx1*(jx2*(kx3+jx3)+kx2+1)+kx1]+qz3[8][l]*dx1;
      y2a=xm[jx1+ivsp]+qz3[8][l]*dx1;
      y1=y1a+dx2*(y2a-y1a)/(x22-x21);
   //   y1b=xm[jx1*(jx2*(kx3+jx3+1)+kx2)+kx1]+qz3[9][l]*dx1;
      y1b=xm[jx12+ivsp]+qz3[9][l]*dx1;
   //   y2b=xm[jx1*(jx2*(kx3+jx3+1)+kx2+1)+kx1]+qz3[10][l]*dx1;
      y2b=xm[jx12+jx1+ivsp]+qz3[10][l]*dx1;
      y2=y1b+dx2*(y2b-y1b)/(x22-x21);
}
      *y=y1+(x3-x31)*(y2-y1)/(x32-x31);
}
//   **************************;
void Model_Engine::fint2on(const double xm[],int jx1z,int jx2z,int kz[5][8],double qz[5][8],int l)               //  ;//!!!simulinc
{
      int i;
      double dx;
      kz[1][l]=jx1z;
      kz[2][l]=jx2z;
      kz[3][l]=1;
      kz[4][l]=1;
      dx=xm[2]-xm[1];
      for(i=1;i<=2;i++)  //do 1 i=1,2;
      {
         qz[i][l]=(xm[jx1z*i+2]-xm[jx1z*i+1])/dx;
         qz[i+2][l]=(xm[jx1z*(i+jx2z)+2]-xm[jx1z*(i+jx2z)+1])/dx;
      }
}
void Model_Engine::fint2n(const double xm[],double x1,double x2,double *y,int l)  //;//!!!simulinc;
       {

      int ivsp;
      double fdx;
      int i,jx1,jx2,kx1,kx2;
      double dx,dx1,x21,x22,y1,y2;
      jx1=kz2[1][l];
      jx2=kz2[2][l];
      kx1=kz2[3][l];
      kx2=kz2[4][l];
  m2:   if(xm[kx1] <= x1 && x1 < xm[kx1+1]) goto m3;
      if(x1 < xm[kx1])
      {
      if(kx1 == 1)goto m3;
      kx1=kx1-1;
      }
      else
      {
      if(kx1 == jx1-1)goto m3;
      kx1=kx1+1;
      }
      kz2[3][l]=kx1;
      dx=xm[kx1+1]-xm[kx1];
      for(i=1;i<=2;i++)   //do 7 i=1,2;
      {
      qz2[i][l]=(xm[jx1*(i-1+kx2)+kx1+1]-xm[jx1*(i-1+kx2)+kx1])/dx;
      qz2[i+2][l]=(xm[jx1*(i-1+kx2+jx2)+kx1+1]-xm[jx1*(i-1+kx2+jx2)
     +kx1])/dx;
     }
      goto m2;
  m3:   dx1=x1-xm[kx1];
      x21=xm[jx1*kx2+kx1]+qz2[1][l]*dx1;
      x22=xm[jx1*(kx2+1)+kx1]+qz2[2][l]*dx1;
 // m6:
    if(x21 <= x2 && x2 < x22)goto m4;
      if(x2 < x21)
      {
      if(kx2 == 1)goto m4;
      kx2=kx2-1;
      }
      else
      {
       if(kx2 == jx2-1)goto m4;
      kx2=kx2+1;
        }
      kz2[4][l]=kx2;
      dx=xm[kx1+1]-xm[kx1];
      fdx=1.0/dx;
      for(i=1;i<=2;i++)   //do 77 i=1,2;
      {
       ivsp=jx1*(i-1+kx2)+kx1;
      qz2[i][l]=(xm[ivsp+1]-xm[ivsp])*fdx;
      ivsp= jx1*(i-1+kx2+jx2)+kx1;
      qz2[i+2][l]=(xm[ivsp+1]-xm[ivsp])*fdx;
     }
      goto m3;
  m4:   if(x21 == x22)
         *y=xm[jx1*(kx2+jx2)+kx1]+qz2[3][l]*dx1;
       else
       {
         y1=xm[jx1*(kx2+jx2)+kx1]+qz2[3][l]*dx1;
         y2=xm[jx1*(kx2+jx2+1)+kx1]+qz2[4][l]*dx1;
         *y=y1+(x2-x21)*(y2-y1)/(x22-x21);
       }
 }
void Model_Engine::fint1iden(double xm[],int jx,double x,double *y,int l)
 {
       int k;
       if(kz1[l] == 0)
       {
        kz1[l]=1;
       if(xm[1] == xm[2])
        qz1[l]=0;
       else
        qz1[l]=(xm[jx+2]-xm[jx+1])/(xm[2]-xm[1]);
        }
        k=kz1[l];
        m3:  if(xm[k] <= x && x < xm[k+1])goto m2;
       if(x < xm[k])
          {
          if(k == 1)goto m2;
          k=k-1;
          }
        else
         {
         if(k == jx-1)goto m2;
         k=k+1;
         }

       if(xm[k] == xm[k+1])
        qz1[l]=0;
       else
        qz1[l]=(xm[jx+k+1]-xm[jx+k])/(xm[k+1]-xm[k]);
       kz1[l]=k;
       goto m3;
   m2:   *y=xm[jx+k]+qz1[l]*(x-xm[k]);

 }
double Model_Engine::ogra (double X,double xmi,double xma)
{
    double ret;
    ret=X;
    if(X < xmi) ret=xmi;
    if(X > xma) ret=xma;
    return ret;
}
